# """
# This code is unlicensed
# By ButterSus
#
# Previous stage:
#     Tokenizer
#
# About current stage:
#     This stage is used to generate Abstract Syntax Tree
#     AST -> SAO
#
# Next stage:
#     SAO
# """


# STARTING RULES
# ==============

@class KiwiParser

@header '''from __future__ import annotations

# Default libraries
# -----------------

from typing import Any, Optional
from itertools import chain

# Custom libraries
# ----------------

from pegen.parser import memoize, memoize_left_rec, Parser
from pegen.tokenizer import Tokenizer
from typing import List as _List
import Kiwi.components.kiwiASO as kiwi


class AST:
    """
    The main task of this class is
    - convert tokens to AST
    """

    parser: KiwiParser
    module: kiwi.Module

    def __init__(self, tokenizer: Tokenizer):
        self.parser = KiwiParser(tokenizer)
        self.module = self.parser.start()

    def eval(self, tokenizer: Tokenizer) -> kiwi.expression:
        return KiwiParser(tokenizer).expression()

    def exec(self, tokenizer: Tokenizer) -> _List[kiwi.statement]:
        return KiwiParser(tokenizer).start().body


#
'''

start[kiwi.Module]:
    | i=import_stmts v=statements ENDMARKER {
        i[0].start, v[-1].end,
        kiwi.Module(i, v)
        }
    | i=import_stmts ENDMARKER {kiwi.Module(
        i[0].start, i[-1].end,
        i, []
        )}
    | v=statements ENDMARKER {kiwi.Module(
        v[0].start, v[-1].end,
        [], v
        )}
    | ENDMARKER {kiwi.Module(
        ..., ...,
        [], []
        )}

# IMPORT STATEMENTS
# =================

import_stmts:
    | v=(import_stmt | from_import_stmt)+ {list(chain.from_iterable(v))}

import_stmt:
    | "import" v=dotted_as_names (NEWLINE | ';')+ {v}

from_import_stmt:
    | s="from" v=dotted_name a=import_stmt {[
        s.start, a[-1].end,
        kiwi.Alias(''.join(v), a)
        ]}
    

dotted_as_names:
    | ','.dotted_as_name+

dotted_as_name:
    | v=dotted_name "as" a=NAME_ {kiwi.Alias(
        v[0].start, a.end,
        ''.join(v), a
        )}
    | v=dotted_name {kiwi.Alias(
        v[0].start, v[-1].end,
        ''.join(v), v[-1]
        )}

dotted_name:
    | v=dotted_name '.' a=NAME_ {[*v, a]}
    | v=NAME_ {[v]}

# GENERAL STATEMENTS
# ==================

statements:
    | statement+

statement:
    | v=simple_stmt (NEWLINE | ';')+ {v}
    | v=compound_stmt {v}

statement_newline:
    | v=simple_stmt (NEWLINE)+ {v}

simple_stmt:
    | assignment
    | expression
    | return_stmt
    | s='pass' {kiwi.Pass(
        s.start, s.end
    )}
    | s='break' {kiwi.Break(
        s.start, s.end
    )}
    | s='continue' {kiwi.Continue(
        s.start, s.end
    )}

compound_stmt:
    | function_def
    | namespace_def
    | if_stmt
    | while_stmt
    | match_stmt

# SIMPLE STATEMENTS
# =================

assignment:
    | a=annotations '=' v=','.expression+ {kiwi.AnnAssignment(
        a[0][0].start, v[-1].end,
        *a, v
        )}
    | i=','.expression+ '=' v=','.expression+ {kiwi.Assignment(
        i[0].start, v[-1].end,
        i, v
        )}
    | i=','.expression+ o=augassign v=','.expression+ {kiwi.AugAssignment(
        i[0].start, v[-1].end,
        i, o, v
        )}
    | a=annotations {kiwi.Annotation(
        a[0][0].start, a[2][-1].end if a[2] else a[1].end,
        *a
        )}

annotations:
    | i=expression ':' a=','.expression+ {[i], a[0], a[1:]}
    | i=','.expression+ '->' a=','.expression+ {i, a[0], a[1:]}

augassign:
    | s='+=' {kiwi.Token(
        s.start, s.end,
        '+='
        )}
    | s='-=' {kiwi.Token(
        s.start, s.end,
        '-='
        )}
    | s='*=' {kiwi.Token(
        s.start, s.end,
        '*='
        )}
    | s='/=' {kiwi.Token(
        s.start, s.end,
        '/='
        )}
    | s='%=' {kiwi.Token(
        s.start, s.end,
        '%='
        )}

return_stmt:
    | s='return' v=expression {kiwi.Return(
        s.start, v.end,
        v
        )}

# COMPOUND STATEMENTS
# ===================

# Common elements
# ---------------

block:
    | NEWLINE INDENT v=statements DEDENT NEWLINE {v}
    | v=statement_newline {[v]}

hiding_block:
    | NEWLINE INDENT v=blocks DEDENT NEWLINE {v}

blocks:
    | (private_block | public_block | default_block)+

private_block:
    | s='private' ':' v=block {kiwi.PrivateBlock(
        s.start, v[-1].end,
        v
    )}

public_block:
    | s='public' ':' v=block {kiwi.PublicBlock(
        s.start, v[-1].end,
        v
    )}

default_block:
    | v=statements {kiwi.DefaultBlock(
        v[0].start, v[-1].end,
        v
    )}

# Namespace definitions
# ---------------------

namespace_def:
    | s='namespace' i=NAME_ ':' b=hiding_block {kiwi.NamespaceDef(
        s.start, b[-1].end,
        i, b
        )}

# Function definitions
# --------------------

function_def:
    | s='function' i=NAME_ '(' p=parameters ')' '->' r=return_param '<' '-' pr=expression ':' b=block {kiwi.FuncDef(
        s.start, b[-1].end,
        i, p[0], p[1], r, pr, b
        )}
    | s='function' i=NAME_ '(' p=parameters ')' '<' '-' pr=expression ':' b=block {kiwi.FuncDef(
        s.start, b[-1].end,
        i, p[0], p[1], None, pr, b
        )}
    | s='function' i=NAME_ '(' p=parameters ')' '->' r=return_param ':' b=block {kiwi.FuncDef(
        s.start, b[-1].end,
        i, p[0], p[1], r, None, b
        )}
    | s='function' i=NAME_ '(' p=parameters ')' ':' b=block {kiwi.FuncDef(
        s.start, b[-1].end,
        i, p[0], p[1], None, None, b
        )}

parameters:
    | p=param_no_default* d=param_with_default* {[*p, *map(lambda x: x[0], d)], list(map(lambda x: x[1], d))}

param_no_default:
    | v=annotations ',' {kiwi.Parameter(
        v[0][0].start, v[2][-1].end if v[-1] else v[1].end,
        v[0], v[1], v[2]
        )}
    | v=annotations &')'{kiwi.Parameter(
        v[0][0].start, v[2][-1].end if v[-1] else v[1].end,
        v[0], v[1], v[2]
        )}
    | s='=' i=NAME_ ',' {kiwi.RefParameter(
        s.start, i.end,
        i
        )}
    | s='=' i=NAME_ &')' {kiwi.RefParameter(
        s.start, i.end,
        i
        )}

param_with_default:
    | a=annotations '=' v=expression e=',' {kiwi.Parameter(
        a[0][0].start, v.end,
        a[0], a[1], a[2]
        ), v
        }
    | a=annotations '=' v=expression &')' {kiwi.Parameter(
        a[0][0].start, v.end,
        a[0], a[1], a[2]
        ), v
        }
    | s='=' i=NAME_ '=' v=expression ',' {kiwi.RefParameter(
        s.start, v.end,
        i
        ), v
        }
    | s='=' i=NAME_ '=' v=expression &')' {kiwi.RefParameter(
        s.start, v.end,
        i
        ), v
        }

return_param:
    | s=expression a=expression* {kiwi.ReturnParameter(
        s.start, a[-1].end if a else s.end,
        s, a
    )}
    | s='=' i=NAME_ {kiwi.ReturnRefParameter(
        s.start, i.end,
        i
        )}

if_stmt:
    | s='if' c=expression ':' t=block 'else' e=if_stmt {kiwi.IfElse(
        s.start, e.end,
        c, t, e
        )}
    | s='if' c=expression ':' t=block 'else' ':' e=block {kiwi.IfElse(
        s.start, e[-1].end,
        c, t, e
        )}
    | s='if' c=expression ':' t=block {kiwi.IfElse(
        s.start, t[-1].end,
        c, t, []
        )}

while_stmt:
    | s='while' c=expression ':' b=block {kiwi.While(
        s.start, b[-1].end,
        c, b
        )}

match_stmt:
    | s="match" v=expression ':' c=case_block {kiwi.MatchCase(
        s.start, c[-1].end,
        v, c
        )}

case_block:
    | NEWLINE INDENT v=cases DEDENT NEWLINE {v}

cases:
    | (',' NEWLINE*).case+

case:
    | s="case" k=expression ':' b=block {kiwi.Case(
        s.start, b[-1].end,
        k, b
        )}

# EXPRESSIONS
# -----------

expression:
    | lambda_def
    | c=disjunctions '?' t=disjunctions ':' e=disjunctions {kiwi.IfExpression(
        c.start, e.end,
        c, t, e)}
    | v=disjunctions {kiwi.Expression(
        v.start, v.end,
        v
        )}

notfull_expression:
    | lambda_def
    | c=disjunctions '?' t=disjunctions ':' e=disjunctions {kiwi.IfExpression(
        c.start, e.end,
        c, t, e)}
    | v=disjunctions {kiwi.NotFullExpression(
        v.start, v.end,
        v)} 

lambda_def:
    | s="lambda" p=lambda_parameters ':' r=expression {kiwi.LambdaDef(
        s.start, r.end,
        p, r
        )}

lambda_parameters:
    | v=','.lambda_param+ {v}
    | [lambda_param] {[]}

lambda_param:
    | v=NAME_ {kiwi.LambdaParameter(
        v.start, v.end,
        v)}

disjunctions:
    | s=conjunctions a=disjunction+ {kiwi.Disjunctions(
        s.start, a[-1].end,
        [s, *a]
    )}
    | conjunctions

disjunction:
    | 'or' v=conjunctions {v}

conjunctions:
    | s=inversion a=conjunction+ {kiwi.Conjunctions(
        s.start, a[-1].end,
        [s, *a]
    )}
    | inversion

conjunction:
    | 'and' v=inversion {v}

inversion:
    | s='not' x=inversion {kiwi.UnaryOp(
        s.start, x.end,
        x, 'not'
        )}
    | comparisons

# Comparison operators
# --------------------

comparisons:
    | f=sum v=compare_op_sum_pair+ {kiwi.Comparisons(
        f.start, v[-1][1].end,
        [f, *list(map(lambda x: x[1], v))], list(map(lambda x: x[0], v))
        )}
    | sum

compare_op_sum_pair:
    | eq_sum
    | noteq_sum
    | lte_sum
    | lt_sum 
    | gte_sum
    | gt_sum

eq_sum:
    | s='==' v=sum {kiwi.Token(
        s.start, s.end,
        '=='
        ), v}

noteq_sum:
    | s='!=' v=sum {kiwi.Token(
        s.start, s.end,
        '!='
        ), v}

lte_sum:
    | s='<=' v=sum {kiwi.Token(
        s.start, s.end,
        '<='
        ), v}

lt_sum:
    | s='<' v=sum {kiwi.Token(
        s.start, s.end,
        '<'
        ), v}

gte_sum:
    | s='>=' v=sum {kiwi.Token(
        s.start, s.end,
        '>='
        ), v}

gt_sum:
    | s='>' v=sum {kiwi.Token(
        s.start, s.end,
        '>'
        ), v}

# Arithmetic operators
# --------------------

sum:
    | x=sum s='+' y=term {kiwi.BinaryOp(
        x.start, y.end,
        x, y, kiwi.Token(
            s.start, s.end,
            '+'
            )
        )}
    | x=sum s='-' y=term {kiwi.BinaryOp(
        x.start, y.end,
        x, y, kiwi.Token(
            s.start, s.end,
            '-'
            )
    )}
    | term

term:
    | x=term s='*' y=factor {kiwi.BinaryOp(
        x.start, y.end,
        x, y, kiwi.Token(
            s.start, s.end,
            '*'
            )
        )}
    | x=term s='/' y=factor {kiwi.BinaryOp(
        x.start, y.end,
        x, y, kiwi.Token(
            s.start, s.end,
            '/'
            )
        )}
    | x=term s='%' y=factor {kiwi.BinaryOp(
        x.start, y.end,
        x, y, kiwi.Token(
            s.start, s.end,
            '%'
            )
        )}
    | factor

factor:
    | s='+' x=factor {kiwi.UnaryOp(
        s.start, x.end,
        x, kiwi.Token(
            s.start, s.end,
            '+'
            )
        )}
    | s='-' x=factor {kiwi.UnaryOp(
        s.start, x.end,
        x, kiwi.Token(
            s.start, s.end,
            '-'
            )
        )}
    | power

power:
    | x=primary s='**' y=factor {kiwi.BinaryOp(
        x.start, y.end,
        x, y, kiwi.Token(
            s.start, s.end,
            '**'
            )
        )}
    | primary

primary:
    | s="match" k=expression ':' c=key_block {kiwi.MatchExpr(
        s.start, c[-1].end,
        k, c
        )}
    | v=primary '.' a=NAME_ {kiwi.Attribute(
        v.start, a.end,
        v, a
        )}
    | i=primary '(' v=arguments e=')' {kiwi.Call(
        i.start, e.end,
        i, v
        )}
    | i=primary '(' e=')' {kiwi.Call(
        i.start, e.end,
        i, []
        )}
    | atom

atom:
    | NAME_
    | s='true' {kiwi.Token(
        s.start, s.end,
        'true'
        )}
    | s='false' {kiwi.Token(
        s.start, s.end,
        'false'
        )}
    | s='none' {kiwi.Token(
        s.start, s.end,
        'none'
        )}
    | s='promise' {kiwi.Token(
        s.start, s.end,
        'promise'
        )}
    | SELECTOR_
    | STRING_
    | NUMBER_
    | group

group:
    | '(' v=notfull_expression ')' {v.setGroup(True)}

# FUNCTION CALL ARGUMENTS
# =======================

arguments:
    | v=args ','? &')' {v}

args:
    | v=','.notfull_expression+ {v}

# MATCH KEYS
# ==========

key_block:
    | NEWLINE INDENT v=match_keys NEWLINE DEDENT {v}

match_keys:
    | (',' NEWLINE*).match_key+

match_key:
    | "default" '->' v=notfull_expression {kiwi.MatchKey(None, None, v)}
    | f=notfull_expression "to" t=notfull_expression '->' v=expression {kiwi.MatchKey(f, t, v)}
    | f=notfull_expression '->' v=notfull_expression {kiwi.MatchKey(f, f, v)}

# TOKENS
# ------

NUMBER_:
    | v=NUMBER {kiwi.Number(v.start, v.end, v.string)}

NAME_:
    | v=NAME {kiwi.Name(v.start, v.end, v.string)}

WORD_:
    | v=(NUMBER | NAME)+ {kiwi.Word(v[0].start, v[-1].end, ''.join(list(map(str, v))))}

STRING_:
    | v=STRING+ {kiwi.String(v[0].start, v[-1].end, kiwi.catString(v))}

SELECTOR_:
    | '@' v=NAME {kiwi.Selector(v.start, v.end, v.string)}
